{"componentChunkName":"component---src-templates-post-tsx","path":"/typescript-and-react-html-attributes/","result":{"data":{"mdx":{"frontmatter":{"title":"Using HTML Attributes as React Component Props in TypeScript","date":"04 May, 2020"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Using HTML Attributes as React Component Props in TypeScript\",\n  \"date\": \"2020-05-04T00:00:00.000Z\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"The hardest thing in TypeScript is knowing what types to give things,\\nespecially when using third-party libraries like React. My most recent\\nheadache has been trying to find a decent way to capture common HTML\\nattributes, like \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"id\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"className\"), \", without having to hard code them into\\nthe component's bespoke props.\"), mdx(\"h1\", null, \"The solution\"), mdx(\"p\", null, \"The solution is actually quite simple - embarssingly simple - and yet quite\\ndifficult to find if you don't quite know what you're looking for. Or you're\\nme and keep forgetting how you solved this problem the last time you\\nencountered it.\"), mdx(\"p\", null, \"Turns out that React has a utility type for containing all the attributes\\nthat can be passed to HTML elements: \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"HTMLAttributes\"), \". This is a generic\\ntype, which means it accepts a type parameter. In this case, the type\\nparameter is just a plain-old object that you can use to nest an extension into\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"HTMLAttributes\"), \" (which is pretty handy).\"), mdx(\"p\", null, \"Before \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"HTMLAttribtues\"), \", I would have had to do this:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\"\n  }), \"// We have to include children explicitly in our bespoke prop-type for the \\n// <Wrapper/>\\ntype OwnProps = {\\n    children?: React.ReactNode\\n}\\n\\nconst Wrapper = ({ children }: OwnProps) => <div>{children}</div>\\n\")), mdx(\"p\", null, \"After \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"HTMLAttributes\"), \", we get to do this:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\"\n  }), \"// We don't need a bespoke prop-type!\\nconst Wrapper = ({ children }: React.HTMLAttributes<{}>) => (\\n    <div>{children}</div>\\n)\\n\")), mdx(\"p\", null, \"It's wonderful!\"));\n}\n;\nMDXContent.isMDXComponent = true;","excerpt":"The hardest thing in TypeScript is knowing what types to give things,\nespecially when using third-party libraries like React. My most recentâ€¦"},"site":{"siteMetadata":{"title":"JRM.DEV","author":{"name":"Joseph R Miles"}}}},"pageContext":{"slug":"/typescript-and-react-html-attributes/"}},"staticQueryHashes":["1985666601"]}