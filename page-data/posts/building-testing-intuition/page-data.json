{"componentChunkName":"component---src-templates-post-tsx","path":"/posts/building-testing-intuition/","result":{"data":{"mdx":{"frontmatter":{"title":"Building Testing Intuition","date":"2020-04-29T00:00:00.000Z"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Building Testing Intuition\",\n  \"date\": \"2020-04-29T00:00:00.000Z\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"I was going to release an article about testing React components, but I\\nrealized that I was missing something. Something that's important when going\\nabout the task of writing tests.\"), mdx(\"p\", null, \"Testing intuition.\"), mdx(\"p\", null, \"I know that sounds pretty nebulous, but despite all my research into the best\\npractices for testing React components, I still found myself lost. What do\\nyou test? What isn't important to test, and what is absolutely critical? Is\\nthere such a thing as too much testing? Or will there never be enough tests?\\nHow do you write your tests so you can get the most value out of them?\"), mdx(\"p\", null, \"There's a lot of debate from a lot of intelligent and practiced people out\\nthere about these questions. After watching a lot of talks and tutorials, and\\nreading many more Medium articles, blog posts, and how-to's, I've learned one\\nbig thing:\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"What, and how, you test depends on how many times you've fucked up.\")), mdx(\"p\", null, \"This seems like an odd take away, doesn't it? Shouldn't there be something\\nmore insightful about partitioning, or validating edge cases? As far as I've\\ngathered, that's a matter of academic discussion - and I don't have the\\npatience for that kind of rigorous thought when all I want to do is implement\\nthe next feature.\"), mdx(\"p\", null, \"Instead, it seems, what is more important for those of us who aren't (yet)\\n\", mdx(\"del\", {\n    parentName: \"p\"\n  }, \"Kent Dodds\"), \" testing gurus, is to write lots of tests. Lots of shitty,\\nuseless tests. We should write so many shitty tests that we start to hate\\nourselves for writing these useless tests and start to think about why these\\ntests are so shit.\"), mdx(\"p\", null, \"And that's when the magic happens. That's when we start to build a\\nfoundation, an intuition, about what and how to test. I hate that there's no\\nmagic formula, no golden rule of thumb. But it's what it is, and, like most\\nthings in life, we only get better when we fail.\"), mdx(\"p\", null, \"So I'm going to spend the next month writing as many, shitty React component\\ntests I can to see if I can figure out a formula that works for me. I'd like\\nto challenge you to do the same. It doesn't have to be React component tests,\\nbut if you're stuck on something and can't find a solution that Just Works,\\ngive it your best shot. Try so many shit solutions you can't help but wonder\\nwhy their shit. And maybe, just maybe, you'll figure it out.\"));\n}\n;\nMDXContent.isMDXComponent = true;","excerpt":"I was going to release an article about testing React components, but I\nrealized that I was missing something. Something that's importantâ€¦"},"site":{"siteMetadata":{"title":"JRM.DEV","author":{"name":"Joseph R Miles"}}}},"pageContext":{"slug":"/posts/building-testing-intuition/"}},"staticQueryHashes":["587791754"]}