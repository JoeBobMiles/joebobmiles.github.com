{"componentChunkName":"component---src-templates-post-tsx","path":"/gatsby-up-and-running-with-typescript/","result":{"data":{"mdx":{"frontmatter":{"title":"Getting Up And Running With TypeScript","date":"23 March, 2020"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Getting Up And Running With TypeScript\",\n  \"date\": \"2020-03-23T00:00:00.000Z\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"If you\\u2019re like me and are someone who is:\"), mdx(\"ul\", {\n    \"className\": \"contains-task-list\"\n  }, mdx(\"li\", _extends({\n    parentName: \"ul\"\n  }, {\n    \"className\": \"task-list-item\"\n  }), mdx(\"input\", _extends({\n    parentName: \"li\"\n  }, {\n    \"type\": \"checkbox\",\n    \"checked\": false,\n    \"disabled\": true\n  })), \" \", \"Just getting started with Gatsby,\"), mdx(\"li\", _extends({\n    parentName: \"ul\"\n  }, {\n    \"className\": \"task-list-item\"\n  }), mdx(\"input\", _extends({\n    parentName: \"li\"\n  }, {\n    \"type\": \"checkbox\",\n    \"checked\": false,\n    \"disabled\": true\n  })), \" \", \"Already familiar with TypeScript, and\"), mdx(\"li\", _extends({\n    parentName: \"ul\"\n  }, {\n    \"className\": \"task-list-item\"\n  }), mdx(\"input\", _extends({\n    parentName: \"li\"\n  }, {\n    \"type\": \"checkbox\",\n    \"checked\": false,\n    \"disabled\": true\n  })), \" \", \"Used a basic Gatsby Starter (like my \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"gatsby-starter-empty\"), \") that came\\nwithout TypeScript\", mdx(\"sup\", _extends({\n    parentName: \"li\"\n  }, {\n    \"id\": \"fnref-1\"\n  }), mdx(\"a\", _extends({\n    parentName: \"sup\"\n  }, {\n    \"href\": \"#fn-1\",\n    \"className\": \"footnote-ref\"\n  }), \"1\")))), mdx(\"p\", null, \"You\\u2019ll probably be wondering how to get up and running with TypeScript so you\\ncan enjoy all the benefits of typed JavaScript.\"), mdx(\"p\", null, \"So how do you do it?\"), mdx(\"h1\", null, \"How You Do It\"), mdx(\"figure\", null, mdx(\"img\", {\n    src: \"/images/59927a0de0b4be0d1ce05fdada187910/PluginsFuckingEverywhere.jpg\",\n    alt: \"Astronaut Buzz Lightyear soothes his friend Woody's existential worries with the simple truth: plugins, plugins fucking everywhere.\",\n    title: \"Something about plugins just rubs me the wrong way. Then again, I have issues with JavaScript in general...\"\n  }), mdx(\"figcaption\", null, \"Something about plugins just rubs me the wrong way. Then again, I have issues with JavaScript in general...\")), mdx(\"p\", null, \"It starts with plugins, which is a common theme in Gatsby. If you\\u2019ve read\\nand/or followed the Gatsby documentation, they use plugins for damn near\\neverything (which annoys me to no end). So, to get started with using\\nTypeScript in your Gatsby project, simply run the following commands:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"$ npm install --save gatsby-plugin-typescript\\n$ npm install --save-dev typescript @types/node @types/react @types/react-dom\\n\")), mdx(\"p\", null, \"Enable the TypeScript plugin we installed by adding\\n\\u2018gatsby-plugin-typescript\\u2019 to your plugin list in gatsby-config.js, and\\nstartup your development server:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"$ npm run develop\\n\")), mdx(\"p\", null, \"If you did everything exactly as shown above, you shouldn\\u2019t get any build\\nerrors, which is great! Now we have TypeScript compilation working for our\\nGatsby project. All you have to do to start using TypeScript is change all\\nthose pesky .js/.jsx files into .ts/.tsx and you should be off to the races!\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"NOTE:\"), \" Don\\u2019t change the file endings on any of your Gatsby config files! If\\nyou do, then Gatsby will startup assuming it has no configuration, breaking\\nthe build! In the Gatsby documentation for working with TypeScript, they\\nexplicitly state that you should not change the Gatsby config file endings\\nfrom .js to .ts, and it\\u2019s (usually) a good idea to heed the docs!\")), mdx(\"div\", {\n    \"className\": \"footnotes\"\n  }, mdx(\"hr\", {\n    parentName: \"div\"\n  }), mdx(\"ol\", {\n    parentName: \"div\"\n  }, mdx(\"li\", _extends({\n    parentName: \"ol\"\n  }, {\n    \"id\": \"fn-1\"\n  }), \"If you\\u2019re smart, you could avoid this by installing the TypeScript Starter,\\n\", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"gatsby-starter-typescript\"), \", which is a fork of the default Starter\\n(\", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"gatsby-starter-default\"), \") that has been converted over to TypeScript. This\\ntutorial assumes that, like me, you were too stubborn (or clueless) about\\nstarting with as little as possible to be this smart.\", mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"#fnref-1\",\n    \"className\": \"footnote-backref\"\n  }), \"\\u21A9\")))));\n}\n;\nMDXContent.isMDXComponent = true;","excerpt":"If you’re like me and are someone who is: Just getting started with Gatsby, Already familiar with TypeScript, and Used a basic Gatsby…"},"site":{"siteMetadata":{"title":"JRM.DEV","author":{"name":"Joseph R Miles"}}}},"pageContext":{"slug":"/gatsby-up-and-running-with-typescript/"}},"staticQueryHashes":["1985666601"]}