@use "sass:math";
@use "theme";
@use "utility";

@mixin -spacing($prefixes, $size, $measure) {
  @each $prefix, $properties in $prefixes {
    .#{$prefix}-#{$size} {
      @each $property in $properties {
        #{$property}: $measure;
      }
    }
  }
}

@mixin -margins($size, $measure) {
  $prefixes: (
    m: (margin),
    mx: (margin-left, margin-right),
    my: (margin-top, margin-bottom),
    ml: (margin-left),
    mr: (margin-right),
    mt: (margin-top),
    mb: (margin-bottom)
  );

  @include -spacing($prefixes, $size, $measure);
}

@mixin -paddings($size, $measure) {
  $prefixes: (
    p: (padding),
    px: (padding-left, padding-right),
    py: (padding-top, padding-bottom),
    pl: (padding-left),
    pr: (padding-right),
    pt: (padding-top),
    pb: (padding-bottom)
  );

  @include -spacing($prefixes, $size, $measure);
}

@mixin -spaces($size, $measure) {
  .space-x-#{$size} > * + * {
    margin: 0 $measure;
    
    &:first-child {
      margin-right: $measure;
    }

    &:last-child {
      margin-right: 0;
    }
  }

  .space-y-#{$size} > * + * {
    margin: $measure 0;
    
    &:first-child {
      margin-bottom: $measure;
    }

    &:last-child {
      margin-bottom: 0;
    }
  }
}

@each $size, $factor in map-get(theme.$sizes, semantic) {
  $baseline: theme.measure(baseline);
  $measure: utility.approximate-units(
    math.pow($baseline / 1rem, $factor)) * 1rem;

  @include -margins($size, $measure);
  @include -paddings($size, $measure);
  @include -spaces($size, $measure);
}

@each $size in map-get(theme.$sizes, absolute) {
  $unit: theme.measure(unit);
  $measure: $size * $unit;

  @include -margins($size, $measure);
  @include -paddings($size, $measure);
  @include -spaces($size, $measure);
}