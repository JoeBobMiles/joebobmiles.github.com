@use "sass:color";
@use "sass:map";
@use "sass:math";
@use "sass:selector";

/// VARS
$min-view-width: 750px;

$-baseline: 1.25;
$unit: ($-baseline / 2) * 1rem;
$ratio: 1.25;

/// COLORS
$colors: (
  black: #111,
  grey: #AAA,
  silver: #DDD,
  white: #FFF,
  
  navy: #001F3F,
  blue: #0074D9,
  aqua: #7FDBFF,
  teal: #39CCCC,
  olive: #3D9970,
  green: #2ECC40,
  lime: #01FF70,
  yellow: #FFDC00,
  orange: #FF851B,
  red: #FF4136,
  maroon: #85144B,
  fuschia: #F012BE,
  purple: #B10DC9,
);

@function color($color) {
  @return map-get($colors, $color);
}

/// SEMANTIC COLORS
$semantic-colors: (
  fg: color(black),
  bg: color(white),

  anchor-fg: color(blue),
  anchor-bg: fade-out(color(blue), .85),
);

@function semantic-color($color) {
  @return map-get($semantic-colors, $color);
}

/// SIZES
@function generate-sizes($low: 0, $high: 12) {
  $sizes: ();

  @for $i from $low through ($high * 2) {
    $sizes: map.set($sizes, ($i / 2), $i * $unit);
  }

  @return map.merge(
    $sizes,
    (
      full: 100%,
      px: 1px
    )
  );
}

$sizes: generate-sizes();

@function size($size) {
  @return map-get($sizes, $size);
}

/// SEMANTIC (TYPOGRAPHIC) SIZES
$semantic-sizes: (
  xs: -2,
  sm: -1,
  md: 0,
  lg: 1,
  xl: 2,
  2x: 3,
  3x: 4,
  4x: 5,
  5x: 6,
  6x: 7,
  7x: 8,
  8x: 9,
  9x: 10,
);

@function semantic-size($size) {
  @return math.pow($ratio, map-get($semantic-sizes, $size)) * (2 * $unit);
}